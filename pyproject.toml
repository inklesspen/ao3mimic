[project]
authors = [
  {name = "Rose Davidson", email = "rose@metaclassical.com"},
]
dependencies = [
  "beautifulsoup4>=4.12.3",
  "cattrs>=24.1.2",
  "charset-normalizer>=3.4.0",
  "html5lib>=1.1",
  "httpx>=0.28.0",
  "hyperlink>=21.0.0",
  "lxml>=5.3.0",
  "msgspec>=0.18.6",
  "tomli-w>=1.1.0",
  "tomli>=2.1.0; python_version < '3.11'",
  "htpy>=24.12.0",
  "werkzeug>=3.1.3",
  "more-itertools>=10.5.0",
  "cssutils>=2.11.1",
]
description = "Add your description here"
name = "ao3mimic"
readme = "README.md"
requires-python = ">=3.12"
version = "0.1.0"

[project.scripts]
ao3mimic = "ao3mimic.cli:main"

[dependency-groups]
dev = [
  "bump-my-version>=0.28.1",
  "pytest>=8.3.3",
]

[build-system]
build-backend = "flit_core.buildapi"
requires = ["flit_core>=3.2,<4"]

[tool.ruff]
extend-exclude = []
line-length = 140
target-version = "py312"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
ignore = ["TRY003"]
# consider for future:
# https://docs.astral.sh/ruff/rules/#flake8-boolean-trap-fbt
# https://docs.astral.sh/ruff/rules/#flake8-errmsg-em
# https://docs.astral.sh/ruff/rules/#eradicate-era
select = ["E4", "E7", "E9", "F", "B", "I", "RUF005", "RUF012", "RUF013", "FA", "C4", "DTZ", "LOG", "G", "PIE", "RET", "SIM", "TCH", "TRY"]

[tool.ruff.format]
# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.ruff.lint.flake8-type-checking]
runtime-evaluated-base-classes = ["msgspec.Struct"]
runtime-evaluated-decorators = ["dataclasses.dataclass"]

[tool.bumpversion]
allow_dirty = false
commit = true
commit_args = ""
current_version = "0.1.0"
ignore_missing_files = false
ignore_missing_version = false
message = "Bump version: {current_version} → {new_version}"
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)"
post_commit_hooks = []
pre_commit_hooks = []
regex = false
replace = "{new_version}"
search = "{current_version}"
serialize = ["{major}.{minor}.{patch}"]
setup_hooks = []
sign_tags = false
tag = true
tag_message = "Bump version: {current_version} → {new_version}"
tag_name = "v{new_version}"

[[tool.bumpversion.files]]
filename = "uv.lock"
replace = """
[[package]]
name = "ao3mimic"
version = "{new_version}"
"""
search = """
[[package]]
name = "ao3mimic"
version = "{current_version}"
"""

[[tool.bumpversion.files]]
filename = "src/ao3mimic/__init__.py"
replace = "__version__ = \"{new_version}\""
search = "__version__ = \"{current_version}\""
